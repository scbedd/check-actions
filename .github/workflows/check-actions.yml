name: Pull Request Processing

on:
  pull_request_target:
      types: [opened, reopened, synchronize]

permissions:
  issues: write

jobs:
  copilot-check:
    name: Process Copilot PR for additional actions
    runs-on: ubuntu-24.04
    steps:
      - name: Print PR info
        run: |
          echo "Triggered by PR User:"
          echo "PR author: ${{ github.event.pull_request.user.login }}"

      - name: "Post comment on copilot PR"
        if: ${{ github.event.pull_request.user.login == 'Copilot' }}
        uses: actions/github-script@v7
        id: post-comment
        with:
          script: |
            // Post a single reminder comment on the PR. If the marker is found in
            // an existing comment, do not post again (prevents duplicates).
            const pr = context.payload.pull_request;
            if (!pr) {
              core.warning('No pull_request in context; skipping post-comment step.');
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = pr.number;

            const marker = '<!-- copilot-pr-verification-reminder -->';
            const body = marker + '\n**Note:** Copilot PRs must be verified for trustworthiness, then commented with `/azp run mcp - pullrequest - live` to get livetest invocations on AI submitted PRs.';

            // Check existing comments to avoid posting duplicates.
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const alreadyPosted = comments.some(c => c.body && c.body.includes(marker));

            if (alreadyPosted) {
              core.info('Reminder comment already exists; skipping.');
              return { skipped: true };
            }

            const res = await github.rest.issues.createComment({ owner, repo, issue_number, body });
            core.info('Posted reminder comment.');
            return { skipped: false, comment_id: res.data.id };

      - name: Debug auth and effective permissions
        uses: actions/github-script@v7
        with:
          script: |
            try {
              core.info(`PR actor: ${context.payload.pull_request?.user?.login || 'none'}`);
              const auth = await github.rest.users.getAuthenticated();
              core.info(`Authenticated as: ${auth.data.login}`);

              // Attempt a safe GET to inspect what permissions GitHub accepts for this token.
              const params = { owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.pull_request.number };
              try {
                const r = await github.request('GET /repos/{owner}/{repo}/issues/{issue_number}/comments', params);
                core.info(`GET comments status: ${r.status}`);
                core.info(`Accepted perms header: ${r.headers['x-accepted-github-permissions'] || 'none'}`);
              } catch (e) {
                core.warning('GET comments failed; logging error details');
                if (e.response) {
                  core.info(`Error status: ${e.status || e.response.status}`);
                  core.info(`Error message: ${e.response.data && e.response.data.message}`);
                  core.info(`Accepted perms header (if present): ${e.response.headers && e.response.headers['x-accepted-github-permissions']}`);
                }
              }
            } catch (err) {
              core.warning(`Auth debug failed: ${err}`);
            }